from datetime import datetime
from typing import Union

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove, LabeledPrice, PreCheckoutQuery
from aiogram.utils.json import json
from aiohttp import ClientSession

from data.config import BIG_TEXT, PERIOD, PROVIDER_TOKEN, DOMAIN, MONO_WEBHOOK_PATH, PRICE, ADMINS
from filters import IsPrivate
from keyboard.inline.choice_buttons import start_keyboard, menu_keyboard_halfreg, approval_keyboard, menu_exit_keyboard, \
    menu_keyboard_fullreg, quantity_keyboard, menu_keyboard_subsonly, menu_keyboard_regonly, invoice_keyboard, \
    menu_keyboard_admin
from loader import dp
from utils import database, states
from utils.database import Customer

db = database.DBCommands()

WEBHOOK_HOST = DOMAIN
WEBHOOK_URL = f'{WEBHOOK_HOST}/{MONO_WEBHOOK_PATH}'


@dp.message_handler(IsPrivate(), Command('start', prefixes='/'))
@dp.message_handler(IsPrivate(), Command('start', prefixes='/'), state='*')
async def start_phone_request(message: Message, state: FSMContext):
    current_data: dict = await state.get_data()
    user_id = message.from_user.id
    customer = await db.get_customer(user_id)
    if customer:
        if customer.subs_check:
            await states.MainMenu.full_reg.set()
            return await main_menu(call=message, state=state)
        else:
            await states.MainMenu.half_reg.set()
            return await main_menu(call=message, state=state)
    else:
        markup = await start_keyboard()
        current_message = await message.answer(text='–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', reply_markup=markup)
        current_data.update({'message': current_message})
        await state.set_data(current_data)


@dp.message_handler(IsPrivate(), content_types=types.ContentType.CONTACT)
@dp.message_handler(IsPrivate(), content_types=types.ContentType.CONTACT, state='*')
async def registration_phone(message: Message, state: FSMContext):
    date = datetime.now().timestamp()

    if message.from_user.id == message.contact.user_id:
        new_customer = await db.add_new_customer(message=message, date=date)
    else:
        return 

    if new_customer:
        await states.MainMenu.half_reg.set()
        return await main_menu(call=message, state=state)
    else:
        old_customer: Customer = await db.get_customer(message.from_user.id)

        if old_customer.subs_check:
            await states.MainMenu.full_reg.set()
            await main_menu(call=message, state=state)
        else:
            await states.MainMenu.half_reg.set()
            return await main_menu(call=message, state=state)


@dp.message_handler(IsPrivate(), text='–í—Å—Ç—É–ø–∏—Ç–∏ –¥–æ –∫–ª—É–±—É', state='*')
async def registration_start(call: Union[CallbackQuery, Message], state: FSMContext):
    current_data: dict = await state.get_data()

    text = '–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏? (–ü—Ä–∏–∫–ª–∞–¥: –í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π)'
    if isinstance(call, CallbackQuery):
        await dp.bot.answer_callback_query(call.id)
        current_message = await call.message.edit_text(text=text)
    else:
        current_message = await call.answer(text=text, reply_markup=ReplyKeyboardRemove())

    current_data.update({'message': current_message})
    await state.set_data(current_data)
    await states.RegMenu.reg_name.set()


@dp.message_handler(IsPrivate(), regexp=r"^([–ê-–Ø,–∞-—è-–Å—ë–Ü—ñ–á—ó]+ [–ê-–Ø,–∞-—è-–Å—ë–Ü—ñ–á—ó]+)$", state=[states.RegMenu.reg_name])
async def registration_name(message: Message, state: FSMContext):
    if len(message.text) > 100:
        await corrector(message=message, state=state)
        return
    current_data: dict = await state.get_data()
    name = message.text.lower()
    current_data.update({'name': name})
    text = '–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤? (–ü—Ä–∏–∫–ª–∞–¥: 47)'

    current_message = await message.answer(text=text, reply_markup=ReplyKeyboardRemove())
    current_data.update({'message': current_message})
    await state.set_data(current_data)
    await states.RegMenu.reg_age.set()


@dp.message_handler(IsPrivate(), regexp=r"^([1-9]|[1-9]\d|[1][0-5]\d)$", state=[states.RegMenu.reg_age])
async def registration_age(message: Message, state: FSMContext):
    # if len(message.text) > 3:
    #     await corrector(message=message, state=state)
    #     return
    current_data: dict = await state.get_data()
    age = int(message.text)
    current_data.update({'age': age})
    text = '–ó —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞? (–ü—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤)'

    current_message = await message.answer(text=text, reply_markup=ReplyKeyboardRemove())
    current_data.update({'message': current_message})
    await state.set_data(current_data)
    await states.RegMenu.reg_location.set()


@dp.message_handler(IsPrivate(), regexp=r"^([–ê-–Ø,–∞-—è-–Å—ë–Ü—ñ–á—ó ]+)$", state=[states.RegMenu.reg_location])
async def registration_location(message: Message, state: FSMContext):
    if len(message.text) > 100:
        await corrector(message=message, state=state)
        return
    current_data: dict = await state.get_data()
    location = message.text.lower()
    current_data.update({'location': location})
    text = f'–í—Å–µ –≤—ñ—Ä–Ω–æ?\n\n' \
           f'–Ü–º\'—è: {current_data["name"].title()}\n\n' \
           f'–í—ñ–∫: {current_data["age"]}\n\n' \
           f'–ú—ñ—Å—Ç–æ: {current_data["location"].capitalize()}'
    markup = await approval_keyboard()

    current_message = await message.answer(text=text, reply_markup=markup)

    current_data.update({'message': current_message})
    await state.set_data(current_data)

    await states.RegMenu.reg_approve.set()


@dp.message_handler(IsPrivate(), text='‚úÖ–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', state=[states.RegMenu.reg_approve])
async def registration_fin(call: Message, state: FSMContext):

    current_data: dict = await state.get_data()
    name = current_data['name']
    age = current_data['age']
    location = current_data['location']
    customer_id = call.from_user.id

    try:
        await db.update_fin_registration(customer_id=customer_id,
                                         pseudonym=name,
                                         age=age,
                                         location=location)
    except Exception as ex:
        print(f'{ex}\n{customer_id} –Ω–µ –≤–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É')
        return

    await states.MainMenu.full_reg.set()

    await invoice_form(message=call, state=state)


@dp.message_handler(IsPrivate(), text='–ü–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –∫–ª—É–±—É', state='*')
async def invoice_form(message: Message, state: FSMContext):
    # current_data: dict = await state.get_data()
    current_state = await state.get_state()
    if current_state == 'Payment:info':
        text = '–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∞—à—É —É—á–∞—Å—Ç—å —É –∫–ª—É–±—ñ.\n–í–Ω–µ—Å—ñ—Ç—å —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫ üßëüèª‚Äçüíª\n\n' \
               '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∏—Å–ª–æ–º <b>–º—ñ—Å—è—Ü—ñ–≤</b> –Ω–∞ —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É ' \
               '–≤—ñ–¥ <b>1</b> –¥–æ <b>99</b>'
    else:
        text = '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∏—Å–ª–æ–º <b>–º—ñ—Å—è—Ü—ñ–≤</b> –Ω–∞ —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É ' \
               '–≤—ñ–¥ <b>1</b> –¥–æ <b>99</b>'
    await states.Payment.periods.set()

    await message.answer(text=text, reply_markup=ReplyKeyboardRemove(), parse_mode='HTML')


@dp.message_handler(IsPrivate(), regexp=r"^([1-9]|[1-9]\d)$", state=[states.Payment.periods])
async def invoice_set_data(message: Message, state: FSMContext):
    current_data: dict = await state.get_data()
    periods = int(message.text)
    current_data.update({'periods': periods})
    await state.set_data(current_data)
    await states.Payment.checkout.set()
    await get_invoice(call=message, state=state)


# @dp.message_handler(IsPrivate(), text='–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∫–ª—É–±–∞', state='*')
# async def invoice_form(call: Message, state: FSMContext):
#     current_data: dict = await state.get_data()
#     periods = 1
#     current_data.update({'periods': periods})
#     markup = await quantity_keyboard()
#     text = '–ö–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –∂–µ–ª–∞–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å:' \
#            f'<b>{periods*30} –¥–Ω–µ–π</b>'
#
#     current_message = await call.answer(text=text, reply_markup=markup)
#     current_data.update({'message': current_message})
#
#     await state.set_data(current_data)
#
#
# @dp.message_handler(IsPrivate(), text='+ 30 –¥–Ω–µ–π', state='*')
# async def period_plus(call: Message, state: FSMContext):
#     current_data: dict = await state.get_data()
#     periods = current_data.get('periods')
#     max_periods = 3
#
#     if periods == max_periods or periods is None:
#         return
#     else:
#         periods += 1
#
#     current_data.update({'periods': periods})
#     text = '–ö–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –∂–µ–ª–∞–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å:' \
#            f'<b>{periods*30} –¥–Ω–µ–π</b>'
#
#     markup = await quantity_keyboard()
#
#     await call.answer(text=text, reply_markup=markup)
#
#     await state.set_data(current_data)
#
#
# @dp.message_handler(IsPrivate(), text='- 30 –¥–Ω–µ–π', state='*')
# async def period_minus(call: Message, state: FSMContext):
#     current_data: dict = await state.get_data()
#     periods = current_data.get('periods')
#
#     if periods == 1 or periods is None:
#         return
#     else:
#         periods -= 1
#
#     current_data.update({'periods': periods})
#     text = '–ö–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –∂–µ–ª–∞–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å:' \
#            f'<b>{periods*30} –¥–Ω–µ–π</b>'
#
#     markup = await quantity_keyboard()
#
#     await call.answer(text=text, reply_markup=markup)
#
#     await state.set_data(current_data)
#
#
# @dp.message_handler(IsPrivate(), text='‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', state='*')
# async def periods_approve(call: Message, state: FSMContext):
#     await get_invoice(call=call, state=state)


async def get_invoice(call: Message, state: FSMContext):
    current_data: dict = await state.get_data()

    user_id = call.from_user.id
    periods = current_data.get('periods')
    if periods is None:
        periods = 1
    price = PRICE
    amount = price * periods
    if periods == 1:
        months = '–º—ñ—Å—è—Ü—å'
    elif periods in [2, 3, 4]:
        months = '–º—ñ—Å—è—Ü—ñ'
    else:
        months = '–º—ñ—Å—è—Ü—ñ–≤'

    # prices = [LabeledPrice(label=f'–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ {periods*30} –¥–Ω—ñ–≤', amount=amount*periods)]
    provider_token = PROVIDER_TOKEN

    url = 'https://api.monobank.ua/api/merchant/invoice/create'

    invoice_data_dict = dict(amount=amount,
                             webHookUrl=f"{WEBHOOK_URL}",
                             merchantPaymInfo=dict(reference=f'{user_id},{periods}',
                                                   destination=f'–ü–æ—Å–ª—É–≥–∏ –Ω–∞ {periods} {months}',
                                                   basketOrder=[dict(name='–ü–æ—Å–ª—É–≥–∏',
                                                                     qty=periods,
                                                                     sum=price)]))
    invoice_data = json.dumps(invoice_data_dict)

    async with ClientSession() as session:
        res = await session.post(
            url=url,
            data=invoice_data,
            headers={'X-Token': f'{provider_token}'}
        )

    response_data: dict = await res.json()
    invoice_url = response_data.get('pageUrl')
    markup = await invoice_keyboard(url=invoice_url, text=f'–°–ø–ª–∞—Ç–∏—Ç–∏ {amount/100} –≥—Ä–Ω.')
    text = f'–í–Ω–µ—Å—Ç–∏ —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫ –∑–∞ {periods} {months} {amount/100} –≥—Ä–Ω.'

    await dp.bot.send_message(chat_id=call.chat.id, text=text, reply_markup=markup)

    # invoice = await dp.bot.send_invoice(chat_id=call.chat.id,
    #                                     title='–ü—ñ–¥–ø–∏—Å–∫–∞',
    #                                     description='–û–ø–ª–∞—Ç–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ —É –∫–ª—É–±—ñ',
    #                                     payload=str(periods),
    #                                     provider_token=provider_token,
    #                                     currency='uah',
    #                                     prices=prices,
    #                                     start_parameter='subs-example')

    # current_data.update({'invoice': invoice})
    # await state.set_data(current_data)


# @dp.pre_checkout_query_handler(lambda query: True, state='*')
# async def checkout(pre_checkout_query: PreCheckoutQuery):
#     await dp.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
#                                            error_message="–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫")
#

# @dp.message_handler(content_types=['successful_payment'], state='*')  # aiogram.utils.exceptions.InvalidQueryID: Query is too old and response timeout expired or query id is invalid
# async def got_payment(message: Message, state: FSMContext):
#     current_data: dict = await state.get_data()
#     customer_id = message.from_user.id
#     timestamp_now = int(datetime.now().timestamp())
#     payload = message.successful_payment.invoice_payload
#     period = PERIOD
#     periods = int(payload)
#     customer = await db.get_customer(customer_id=customer_id)
#     markup = await menu_exit_keyboard()
#
#     if timestamp_now > customer.subs_before:
#         subs_before = timestamp_now + period * periods  # ?periods
#
#         await db.update_subs_before(customer_id=customer_id, subs_before=subs_before)
#         current_message = await dp.bot.send_message(chat_id=message.chat.id,
#                                                     text='–í—ñ—Ç–∞—é, —Ç–∏ —É –∫–ª—É–±—ñ üßëüèª‚Äçüíª',
#                                                     parse_mode='Markdown',
#                                                     reply_markup=markup)
#     else:
#         subs_before = customer.subs_before + period * periods
#         print_date = datetime.fromtimestamp(subs_before).strftime("%d-%m-%Y")
#
#         await db.update_subs_before(customer_id=customer_id, subs_before=subs_before)
#         current_message = await dp.bot.send_message(chat_id=message.chat.id,
#                                                     text=f'–ü—ñ–¥–ø–∏—Å–∫–∞ –ø–æ–¥–æ–≤–∂–µ–Ω–∞ –¥–æ <b>{print_date}</b> üßëüèª‚Äçüíª',
#                                                     parse_mode='HTML',
#                                                     reply_markup=markup)
#
#     current_data.update({'message': current_message})
#     await state.set_data(current_data)


@dp.message_handler(IsPrivate(), text='‚ò∞–ú–µ–Ω—é', state='*')
@dp.message_handler(IsPrivate(), Command(['menu'], prefixes='/'), state='*')
async def main_menu(call: Union[CallbackQuery, Message], state: FSMContext):
    current_data: dict = await state.get_data()
    current_state = await state.get_state()
    text = BIG_TEXT
    if isinstance(call, CallbackQuery):
        is_admin = call.message.from_user.id in ADMINS
    else:
        is_admin = call.from_user.id in ADMINS

    if is_admin:
        markup = await menu_keyboard_admin()
    else:
        if current_state == 'MainMenu:full_reg':
            markup = await menu_keyboard_fullreg()
        elif current_state == 'MainMenu:half_reg':
            markup = await menu_keyboard_halfreg()
        else:
            return await start_phone_request(message=call, state=state)

    current_message = await call.answer(text=text, reply_markup=markup, parse_mode='HTML')  # if subs_check

    current_data.update({'message': current_message})
    await state.set_data(current_data)


@dp.message_handler(IsPrivate(), Command('info', prefixes='/'), state='*')
@dp.message_handler(IsPrivate(), text='–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –∫–ª—É–±—É', state='*')
async def info(call: Message, state: FSMContext):
    current_data: dict = await state.get_data()

    customer = await db.get_customer(call.from_user.id)

    if customer:
        if customer.subs_check:
            await states.MainMenu.full_reg.set()
            datetime_db = datetime.fromtimestamp(customer.subs_before)
            if datetime_db > datetime.now():
                customer_subs_date = datetime_db.strftime('%d-%m-%Y')
                text = f'–ü–æ—Ç–æ—á–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –¥–æ <b>{customer_subs_date}</b>'
                markup = await menu_exit_keyboard()
            else:
                # text = f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ –∫–ª—É–±–µ.\n–í–Ω–µ—Å–∏—Ç–µ —á–ª–µ–Ω—Å–∫–∏–π –≤–∑–Ω–æ—Å üßëüèª‚Äçüíª'
                # markup = await menu_keyboard_subsonly()
                await states.Payment.info.set()
                return await invoice_form(message=call, state=state)
        else:
            await states.MainMenu.half_reg.set()
            text = f'–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∞—à—É —É—á–∞—Å—Ç—å —É –∫–ª—É–±—ñ.\n\n' \
                   f'–ó–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Ç–∞\n–í–Ω–µ—Å—ñ—Ç—å —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫ üßëüèª‚Äçüíª'
            markup = await menu_keyboard_regonly()
    else:
        await states.MainMenu.no_reg.set()
        text = f'–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è'
        markup = await menu_exit_keyboard()

    current_message = await call.answer(text=text, reply_markup=markup, parse_mode='HTML')

    current_data.update({'message': current_message})
    await state.set_data(current_data)


@dp.message_handler(text='‚¨Ö–ù–∞–∑–∞–¥', state='*')
@dp.message_handler(text='‚¨Ö–ù–∞–∑–∞–¥')
@dp.throttled(rate=0.5)
async def cancel(call: Union[CallbackQuery, Message], state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'RegMenu:reg_approve':
        await state.reset_state()
        return await registration_start(call=call, state=state)
    if current_state == 'MainMenu:full_reg':
        return await main_menu(call=call, state=state)
    if current_state == 'MainMenu:half_reg':
        return await main_menu(call=call, state=state)
    if current_state == 'MainMenu:no_reg':
        return await main_menu(call=call, state=state)
    if not current_state:
        return await main_menu(call=call, state=state)
#     if current_state == 'AdminMenu:change' or current_state == 'AdminMenu:rollback':
#         await state.reset_state()
#         return await admin_panel(call=call, state=state)
#     if current_state == 'AdminMenu:panel' or current_state == 'Order:info':
#         await state.reset_state()
#         return await start_choice(message=call, state=state)
#     if current_state == 'AdminMenu:credit':
#         await state.reset_state()
#         return await admin_panel(call=call, state=state)
#     if current_state == 'AdminMenu:credit_push':
#         await state.reset_state()
#         return await credit_mutation_abc(call=call, state=state)
#     if current_state == 'AdminMenu:credit_upd':
#         await state.reset_state()
#         return await credit_mutation_abc(call=call, state=state)
#     if current_state == 'AdminMenu:instance_menu':
#         await state.reset_state()
#         return await admin_panel(call=call, state=state)
#     if current_state == 'ChangePseudonym:initial':
#         await state.reset_state()
#         await call.message.delete()
#         return
#     if not current_state:
#         return await start_choice(message=call, state=state)


async def delete_messages(state):
    current_data: dict = await state.get_data()
    message = current_data.get('message')

    try:
        await message.delete()
    except Exception as ex:
        print(ex)

    invoice = current_data.pop('invoice', None)
    if invoice:
        try:
            await invoice.delete()
        except Exception as ex:
            print(ex)


@dp.message_handler(IsPrivate(), state=[states.RegMenu.reg_name, states.RegMenu.reg_age, states.RegMenu.reg_location,
                                        states.Payment.periods])
async def corrector(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'RegMenu:reg_name':
        text = '–ù–µ–≤—ñ—Ä–Ω–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–º\'—è –ø—Ä—ñ–∑–≤–∏—â–µ ' \
               '—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∫–∏—Ä–∏–ª–∏—Ü–µ—é, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π'
        await message.answer(text=text)
    if current_state == 'RegMenu:reg_age':
        text = '–ù–µ–≤—ñ—Ä–Ω–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 47'
        await message.answer(text=text)
    if current_state == 'RegMenu:reg_location':
        text = '–ù–µ–≤—ñ—Ä–Ω–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∫–∏—Ä–∏–ª–∏—Ü–µ—é, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤'
        await message.answer(text=text)
    if current_state == 'Payment:periods':
        text = '–ù–µ–≤—ñ—Ä–Ω–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —á–∏–ª–æ –º—ñ—è—Ü—ñ–≤ –≤—ñ–¥ 1 –¥–æ 99, —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10'
        await message.answer(text=text)


@dp.message_handler(IsPrivate())
@dp.message_handler(IsPrivate(), state='*')
async def terminator(message):
    try:
        await message.delete()
    except Exception as ex:
        print(ex)
